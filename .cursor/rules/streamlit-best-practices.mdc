---
alwaysApply: true
description: "Pr√°ticas obrigat√≥rias para desenvolvimento seguro com Streamlit"
---

# üé® STREAMLIT: PR√ÅTICAS OBRIGAT√ìRIAS

## ‚ùå ANTI-PATTERNS PROIBIDOS

### Uso inseguro de session_state
```python
# ‚ùå PERIGOSO - Acesso inseguro ao session_state
def unsafe_function():
    username = st.session_state.get('username')  # Pode falhar se for None
    result = username.get('value')  # Erro se username n√£o for dict

    # Modifica√ß√£o direta sem valida√ß√£o
    st.session_state.search_results = external_api_call(username)
```

### Tratamento inadequado de erros
```python
# ‚ùå PERIGOSO - Sem tratamento de erros
def dangerous_search():
    result = run_maigret(username)  # Pode falhar
    st.write(result)  # Pode quebrar a UI se result for None
```

### Organiza√ß√£o ruim de c√≥digo
```python
# ‚ùå PERIGOSO - Tudo em uma fun√ß√£o gigante
def main():
    # 500+ linhas de c√≥digo misturado
    # UI, l√≥gica de neg√≥cio, valida√ß√£o, etc.
    # Dif√≠cil de testar e manter
    pass
```

## ‚úÖ PR√ÅTICAS OBRIGAT√ìRIAS

### Estrutura modular obrigat√≥ria
```python
# ‚úÖ SEGURO - Estrutura modular obrigat√≥ria
# app.py - Apenas interface e controle de fluxo
# validation.py - Valida√ß√µes de seguran√ßa
# maigret_service.py - L√≥gica de neg√≥cio
# utils.py - Fun√ß√µes utilit√°rias

# app.py
import streamlit as st
from validation import validate_username_secure, validate_and_display_username
from maigret_service import run_maigret_search
from ui_components import display_search_form, display_results

def main():
    """Fun√ß√£o principal - apenas orquestra√ß√£o"""
    init_session_state()

    # Interface organizada por abas
    tab1, tab2, tab3 = st.tabs(["üîç Busca", "üìä Resultados", "‚öôÔ∏è Configura√ß√µes"])

    with tab1:
        handle_search_tab()

    with tab2:
        handle_results_tab()

    with tab3:
        handle_settings_tab()

def handle_search_tab():
    """Aba de busca - l√≥gica isolada"""
    st.markdown("## üîç Buscar Perfis")

    # Formul√°rio de busca
    username = st.text_input("Username para investigar:")

    # Valida√ß√£o em tempo real
    if username:
        is_valid, clean_username, error_msg = validate_and_display_username(username)
        if not is_valid:
            st.error(f"‚ùå {error_msg}")
            return

    # Bot√£o de busca
    if st.button("üöÄ Iniciar Investiga√ß√£o"):
        if username:
            perform_search(clean_username)

def perform_search(username: str):
    """Executa busca de forma segura"""
    try:
        with st.spinner("üîç Executando busca..."):
            result = run_maigret_search(username)

        if result['success']:
            st.success("‚úÖ Busca conclu√≠da!")
            st.session_state.current_results = result
            st.rerun()  # Recarregar para mostrar resultados
        else:
            st.error(f"‚ùå Erro: {result.get('error', 'Erro desconhecido')}")

    except Exception as e:
        st.error(f"‚ùå Erro inesperado: {str(e)}")
        logging.error(f"Search error: {e}")
```

### Session state seguro obrigat√≥rio
```python
# ‚úÖ SEGURO - Session state com valida√ß√£o obrigat√≥ria
def init_session_state():
    """Inicializa√ß√£o segura do session state"""

    # Estado de busca
    if 'search_history' not in st.session_state:
        st.session_state.search_history = []

    if 'current_results' not in st.session_state:
        st.session_state.current_results = None

    if 'search_in_progress' not in st.session_state:
        st.session_state.search_in_progress = False

    # Configura√ß√µes com valores padr√£o seguros
    defaults = {
        'timeout': 30,
        'max_sites': 100,
        'max_connections': 50,
        'debug_mode': False
    }

    for key, default_value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = default_value

def safe_get_session_value(key: str, default=None):
    """Obt√©m valor do session_state de forma segura"""
    try:
        return st.session_state.get(key, default)
    except Exception:
        return default

def safe_set_session_value(key: str, value):
    """Define valor do session_state de forma segura"""
    try:
        st.session_state[key] = value
    except Exception as e:
        st.error(f"Erro ao salvar configura√ß√£o: {e}")
```

### Tratamento robusto de erros obrigat√≥rio
```python
# ‚úÖ SEGURO - Tratamento de erros obrigat√≥rio
import logging
from typing import Optional, Dict, Any

def handle_search_with_error_management():
    """Gerencia busca com tratamento robusto de erros"""

    # Container para mensagens de erro
    error_container = st.container()

    try:
        # Valida√ß√£o de entrada
        username = st.text_input("Username:")
        if not username:
            return

        is_valid, clean_username, error_msg = validate_and_display_username(username)
        if not is_valid:
            with error_container:
                st.error(f"‚ùå {error_msg}")
            return

        # Configura√ß√£o de busca
        config = get_search_config()

        # Execu√ß√£o com timeout e tratamento de erros
        with st.spinner("üîç Executando busca..."):
            result = run_maigret_secure(
                username=clean_username,
                timeout_sec=config['timeout'],
                max_sites=config['max_sites']
            )

        # Processamento do resultado
        if result.get('success'):
            display_success_results(result)
        else:
            with error_container:
                st.error(f"‚ùå Busca falhou: {result.get('error', 'Erro desconhecido')}")

    except ValueError as e:
        with error_container:
            st.error(f"‚ùå Erro de valida√ß√£o: {str(e)}")
        logging.warning(f"Validation error: {e}")

    except subprocess.TimeoutExpired:
        with error_container:
            st.error("‚ùå Timeout: Busca demorou muito tempo")
            st.info("üí° Tente reduzir o n√∫mero de sites ou aumentar o timeout")
        logging.error("Search timeout")

    except Exception as e:
        with error_container:
            st.error("‚ùå Erro inesperado durante a busca")
        logging.error(f"Unexpected error: {e}")

        # Modo debug opcional
        if st.session_state.get('debug_mode'):
            with st.expander("üîß Detalhes t√©cnicos"):
                st.exception(e)

def display_success_results(result: Dict[str, Any]):
    """Exibe resultados de forma segura"""

    # Valida√ß√£o do resultado
    if not isinstance(result, dict):
        st.error("‚ùå Formato de resultado inv√°lido")
        return

    # M√©tricas seguras
    sites_found = result.get('sites_found', 0)
    total_sites = result.get('total_sites', 0)

    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Sites Verificados", total_sites)
    with col2:
        st.metric("Perfis Encontrados", sites_found)
    with col3:
        success_rate = (sites_found / total_sites * 100) if total_sites > 0 else 0
        st.metric("Taxa de Sucesso", f"{success_rate:.1f}%")

    # Exibi√ß√£o segura dos dados
    processed_results = result.get('processed_results', [])
    if processed_results:
        display_results_table(processed_results)
```

### Componentes reutiliz√°veis obrigat√≥rios
```python
# ‚úÖ SEGURO - Componentes reutiliz√°veis obrigat√≥rios
# ui_components.py

def display_search_form() -> Optional[str]:
    """Componente de formul√°rio de busca reutiliz√°vel"""

    st.markdown("### üîç Investigar Username")

    # Input com valida√ß√£o
    username = st.text_input(
        "Username para investigar:",
        placeholder="Ex: usuario123",
        help="Digite o username que deseja investigar"
    )

    # Valida√ß√£o em tempo real
    if username:
        is_valid, clean_username, error_msg = validate_and_display_username(username)
        if is_valid:
            st.success(f"‚úÖ Username v√°lido: `{clean_username}`")
            return clean_username
        else:
            st.error(f"‚ùå {error_msg}")

    return None

def display_results_table(results: list):
    """Componente de tabela de resultados reutiliz√°vel"""

    if not results:
        st.info("Nenhum resultado encontrado")
        return

    # Preparar dados para exibi√ß√£o
    df_data = []
    for result in results:
        if isinstance(result, dict):
            df_data.append({
                'Plataforma': result.get('nome', 'N/A'),
                'URL': result.get('url', 'N/A'),
                'Status': result.get('status', 'N/A'),
                'Confiabilidade': result.get('confiabilidade', 0)
            })

    if df_data:
        import pandas as pd
        df = pd.DataFrame(df_data)

        st.dataframe(
            df,
            column_config={
                "URL": st.column_config.LinkColumn("URL"),
                "Confiabilidade": st.column_config.ProgressColumn(
                    "Confiabilidade (%)",
                    min_value=0,
                    max_value=100,
                ),
            },
            hide_index=True
        )

def display_config_sidebar():
    """Componente de configura√ß√£o na sidebar"""

    with st.sidebar:
        st.markdown("### ‚öôÔ∏è Configura√ß√µes de Busca")

        # Timeout
        timeout = st.slider(
            "Timeout por site (segundos):",
            min_value=5,
            max_value=60,
            value=st.session_state.get('timeout', 30),
            help="Tempo m√°ximo de espera por site"
        )

        # M√°ximo de sites
        max_sites = st.selectbox(
            "M√°ximo de sites:",
            options=[10, 25, 50, 100, 500],
            index=2,
            help="N√∫mero m√°ximo de sites para verificar"
        )

        # Atualizar session_state
        st.session_state.timeout = timeout
        st.session_state.max_sites = max_sites

        return {
            'timeout': timeout,
            'max_sites': max_sites
        }
```

### Logging obrigat√≥rio
```python
# ‚úÖ SEGURO - Logging obrigat√≥rio
import logging
import sys

def setup_logging():
    """Configura√ß√£o obrigat√≥ria de logging"""

    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout),
            logging.FileHandler('app.log')
        ]
    )

    # Logger espec√≠fico da aplica√ß√£o
    logger = logging.getLogger('maigret_app')
    return logger

# Uso obrigat√≥rio em todas as opera√ß√µes cr√≠ticas
logger = setup_logging()

def log_search_operation(username: str, operation: str, success: bool, **kwargs):
    """Logging obrigat√≥rio de opera√ß√µes de busca"""

    if success:
        logger.info(f"‚úÖ {operation} successful for username: {username}")
    else:
        logger.error(f"‚ùå {operation} failed for username: {username}")

    # Log de par√¢metros (sem dados sens√≠veis)
    safe_params = {k: v for k, v in kwargs.items() if k not in ['password', 'token']}
    logger.debug(f"Parameters: {safe_params}")
```

## üìã CHECKLIST STREAMLIT OBRIGAT√ìRIO

- [ ] C√≥digo organizado em m√≥dulos separados
- [ ] Session state inicializado corretamente
- [ ] Tratamento robusto de erros implementado
- [ ] Valida√ß√£o de entrada em tempo real
- [ ] Componentes reutiliz√°veis criados
- [ ] Logging configurado e usado
- [ ] Testes da interface implementados
- [ ] Modo debug opcional dispon√≠vel