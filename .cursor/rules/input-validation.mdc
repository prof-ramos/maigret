---
alwaysApply: true
description: "Implementar valida√ß√£o robusta de entrada para prevenir vulnerabilidades"
---

# üõ°Ô∏è VALIDA√á√ÉO ROBUSTA DE ENTRADA

## ‚ùå VALIDA√á√ÉO INSUFICIENTE (PROIBIDA)

### Valida√ß√£o b√°sica que permite bypass
```python
# ‚ùå PERIGOSO - Valida√ß√£o muito b√°sica
def validate_username(username):
    if len(username) < 3:           # Muito permissivo
        return False
    return True                     # N√£o verifica caracteres especiais
```

### Sem verifica√ß√£o de tipos
```python
# ‚ùå PERIGOSO - Sem verifica√ß√£o de tipos
def process_input(data):
    result = data.get('username')  # Pode falhar se data n√£o for dict
    return result
```

## ‚úÖ VALIDA√á√ÉO OBRIGAT√ìRIA

### Valida√ß√£o completa com sanitiza√ß√£o
```python
# ‚úÖ SEGURO - Valida√ß√£o robusta obrigat√≥ria
import re
import string
from typing import Dict, Any, Union

def validate_username_secure(username: str) -> str:
    """
    Valida√ß√£o robusta de username com sanitiza√ß√£o completa

    Args:
        username (str): Username a ser validado

    Returns:
        str: Username sanitizado e validado

    Raises:
        ValueError: Se username for inv√°lido ou inseguro
    """

    # 1. Verifica√ß√µes b√°sicas
    if not isinstance(username, str):
        raise ValueError("Username deve ser uma string")

    if not username or not username.strip():
        raise ValueError("Username n√£o pode estar vazio")

    username = username.strip()

    # 2. Verificar comprimento
    if not (3 <= len(username) <= 50):
        raise ValueError("Username deve ter entre 3 e 50 caracteres")

    # 3. Caracteres permitidos (alfanum√©rico + s√≠mbolos seguros)
    allowed_chars = set(string.ascii_letters + string.digits + '._-')
    if not set(username).issubset(allowed_chars):
        invalid_chars = set(username) - allowed_chars
        raise ValueError(f"Caracteres n√£o permitidos: {', '.join(invalid_chars)}")

    # 4. Verificar padr√µes perigosos
    dangerous_patterns = [
        # Command injection
        '&&', '||', ';', '|', '`', '$', '!',
        # Path traversal
        '..', '/.', '\\.',
        # Reserved words
        'rm ', 'sudo', 'chmod', 'chown', 'passwd',
        # SQL injection
        "'", '"', '--', '/*', '*/',
        # Script injection
        '<script', '</script', 'javascript:', 'data:',
    ]

    username_lower = username.lower()
    for pattern in dangerous_patterns:
        if pattern in username_lower:
            raise ValueError(f"Padr√£o proibido detectado: {pattern}")

    # 5. Verificar se n√£o come√ßa/termina com pontos ou h√≠fens
    if username.startswith(('.', '-')) or username.endswith(('.', '-')):
        raise ValueError("Username n√£o pode come√ßar/terminar com . ou -")

    # 6. Verificar sequ√™ncias repetitivas suspeitas
    if any(char * 10 in username for char in string.ascii_letters + string.digits):
        raise ValueError("Sequ√™ncias repetitivas suspeitas detectadas")

    return username

def validate_and_display_username(username: str) -> tuple[bool, str, str]:
    """
    Valida username e retorna resultado para exibi√ß√£o no Streamlit

    Returns:
        tuple: (is_valid, clean_username, error_message)
    """
    try:
        clean_username = validate_username_secure(username)
        return True, clean_username, ""
    except ValueError as e:
        return False, "", str(e)
```

### Valida√ß√£o de dados estruturados
```python
# ‚úÖ SEGURO - Valida√ß√£o de tipos obrigat√≥ria
def process_user_data(data: Union[str, Dict[str, Any]]) -> Dict[str, Any]:
    """Processa dados do usu√°rio com valida√ß√£o robusta"""

    if isinstance(data, str):
        # Se for string, tentar fazer parse JSON
        try:
            import json
            data = json.loads(data)
        except json.JSONDecodeError:
            raise ValueError("Dados inv√°lidos: esperado JSON ou dicion√°rio")

    if not isinstance(data, dict):
        raise ValueError("Dados devem ser um dicion√°rio")

    # Validar campos obrigat√≥rios
    required_fields = ['username', 'search_type']
    for field in required_fields:
        if field not in data:
            raise ValueError(f"Campo obrigat√≥rio ausente: {field}")

    # Validar e sanitizar username
    if 'username' in data:
        data['username'] = validate_username_secure(data['username'])

    # Validar search_type
    valid_types = {'username', 'email', 'social_media'}
    if data.get('search_type') not in valid_types:
        raise ValueError(f"Tipo de busca inv√°lido. Use: {', '.join(valid_types)}")

    return data
```

### Valida√ß√£o de par√¢metros num√©ricos
```python
# ‚úÖ SEGURO - Valida√ß√£o de n√∫meros obrigat√≥ria
def validate_search_parameters(
    max_sites: int,
    timeout_sec: int,
    max_connections: int
) -> None:
    """Valida par√¢metros de busca"""

    # Validar max_sites
    if not (1 <= max_sites <= 3000):
        raise ValueError("max_sites deve estar entre 1 e 3000")

    # Validar timeout
    if not (5 <= timeout_sec <= 300):  # Entre 5 segundos e 5 minutos
        raise ValueError("Timeout deve estar entre 5 e 300 segundos")

    # Validar max_connections
    if not (1 <= max_connections <= 100):
        raise ValueError("max_connections deve estar entre 1 e 100")
```

## üîç VALIDA√á√ÉO EM CAMADAS

### 1. Valida√ß√£o de Tipo
```python
# Sempre verificar tipos primeiro
def safe_get_value(data, key, default=None):
    """Obt√©m valor de forma segura"""
    if not isinstance(data, dict):
        return default
    return data.get(key, default)
```

### 2. Valida√ß√£o de Conte√∫do
```python
# Sempre sanitizar conte√∫do
def sanitize_text_input(text: str) -> str:
    """Remove caracteres perigosos e sanitiza entrada"""
    if not isinstance(text, str):
        return ""

    # Remover caracteres de controle
    text = ''.join(char for char in text if ord(char) >= 32)

    # Limitar comprimento
    return text[:1000]  # M√°ximo 1000 caracteres
```

### 3. Valida√ß√£o de Seguran√ßa
```python
# Sempre verificar padr√µes perigosos
def contains_dangerous_patterns(text: str) -> bool:
    """Verifica se texto cont√©m padr√µes perigosos"""
    dangerous = ['<script', 'javascript:', 'data:', 'vbscript:']
    text_lower = text.lower()
    return any(pattern in text_lower for pattern in dangerous)
```

## üìã CHECKLIST DE VALIDA√á√ÉO

- [ ] Tipo de entrada verificado
- [ ] Comprimento validado
- [ ] Caracteres permitidos verificados
- [ ] Padr√µes perigosos detectados
- [ ] Sanitiza√ß√£o aplicada
- [ ] Exce√ß√µes apropriadas lan√ßadas
- [ ] Type hints utilizados
- [ ] Testes de valida√ß√£o implementados