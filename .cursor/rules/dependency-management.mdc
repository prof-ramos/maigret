---
alwaysApply: true
description: "Gerenciamento seguro de depend√™ncias Python usando uv"
---

# üì¶ GERENCIAMENTO SEGURO DE DEPEND√äNCIAS

## ‚ùå PR√ÅTICAS PROIBIDAS

### Nunca usar pip diretamente
```bash
# ‚ùå PERIGOSO - Nunca use pip diretamente
pip install package-name
pip install -r requirements.txt
pip freeze > requirements.txt

# ‚ùå PERIGOSO - Nunca use poetry ou pip-tools
poetry add package-name
pip-compile requirements.in
```

### Instala√ß√µes sem verifica√ß√£o de seguran√ßa
```bash
# ‚ùå PERIGOSO - Sem verifica√ß√£o de vulnerabilidades
uv add insecure-package  # Sem verificar CVEs
```

## ‚úÖ PR√ÅTICAS OBRIGAT√ìRIAS COM UV

### Comandos uv obrigat√≥rios
```bash
# ‚úÖ OBRIGAT√ìRIO - Adicionar depend√™ncias
uv add package-name
uv add package-name==1.2.3  # Vers√£o espec√≠fica
uv add package-name --dev   # Depend√™ncia de desenvolvimento

# ‚úÖ OBRIGAT√ìRIO - Remover depend√™ncias
uv remove package-name

# ‚úÖ OBRIGAT√ìRIO - Sincronizar depend√™ncias
uv sync  # Instala tudo do uv.lock

# ‚úÖ OBRIGAT√ìRIO - Atualizar depend√™ncias
uv lock --upgrade  # Atualiza vers√µes
uv sync            # Aplica mudan√ßas

# ‚úÖ OBRIGAT√ìRIO - Executar scripts
uv run script.py
uv run pytest
uv run mypy
```

### Scripts com depend√™ncias inline
```python
# /// script
# requires-python = ">=3.12"
# dependencies = [
#     "requests>=2.31.0",
#     "click>=8.1.0",
#     "rich>=13.7.0",
# ]
# ///

#!/usr/bin/env python3
"""
Script com depend√™ncias gerenciadas por uv
"""

import requests
from rich.console import Console

def main():
    console = Console()
    console.print("[bold green]Script executado com sucesso![/bold green]")

if __name__ == "__main__":
    main()
```

### Gerenciamento de scripts com uv
```bash
# ‚úÖ OBRIGAT√ìRIO - Gerenciar depend√™ncias de scripts
uv add requests --script my_script.py
uv remove requests --script my_script.py
uv sync --script my_script.py

# ‚úÖ OBRIGAT√ìRIO - Executar scripts com depend√™ncias
uv run my_script.py
```

## üîí VERIFICA√á√ÉO DE SEGURAN√áA OBRIGAT√ìRIA

### Auditoria de depend√™ncias obrigat√≥ria
```bash
# ‚úÖ OBRIGAT√ìRIO - Verificar vulnerabilidades antes de adicionar
uv add --dry-run package-name  # Preview das mudan√ßas

# ‚úÖ OBRIGAT√ìRIO - Verificar vulnerabilidades existentes
uv run safety check  # Executar verifica√ß√£o de seguran√ßa

# ‚úÖ OBRIGAT√ìRIO - Atualizar depend√™ncias vulner√°veis
uv lock --upgrade-package requests  # Atualizar pacote espec√≠fico
uv sync  # Aplicar mudan√ßas
```

### Monitoramento de depend√™ncias cr√≠ticas
```python
# scripts/audit_dependencies.py
#!/usr/bin/env python3
"""
Auditoria obrigat√≥ria de depend√™ncias de seguran√ßa
"""

import subprocess
import json
from pathlib import Path
from typing import Dict, List, Any

def check_vulnerabilities() -> Dict[str, Any]:
    """Verifica vulnerabilidades usando safety"""
    try:
        result = subprocess.run(
            ["uv", "run", "safety", "check", "--json"],
            capture_output=True,
            text=True,
            cwd=Path(__file__).parent.parent
        )

        if result.returncode == 0:
            return {"vulnerabilities": [], "status": "safe"}
        else:
            data = json.loads(result.stdout)
            return {
                "vulnerabilities": data.get("vulnerabilities", []),
                "status": "vulnerable"
            }
    except Exception as e:
        return {"error": str(e), "status": "error"}

def check_outdated_packages() -> Dict[str, Any]:
    """Verifica pacotes desatualizados"""
    try:
        result = subprocess.run(
            ["uv", "lock", "--check-updates"],
            capture_output=True,
            text=True,
            cwd=Path(__file__).parent.parent
        )

        # Parse da sa√≠da para identificar pacotes desatualizados
        outdated = []
        if "would be updated" in result.stdout:
            # Implementar parsing da sa√≠da
            pass

        return {"outdated": outdated, "status": "checked"}
    except Exception as e:
        return {"error": str(e), "status": "error"}

def generate_security_report() -> str:
    """Gera relat√≥rio de seguran√ßa das depend√™ncias"""

    vulnerabilities = check_vulnerabilities()
    outdated = check_outdated_packages()

    report = []
    report.append("# üîí RELAT√ìRIO DE SEGURAN√áA DE DEPEND√äNCIAS")
    report.append("")

    # Vulnerabilidades
    if vulnerabilities["status"] == "safe":
        report.append("‚úÖ **Nenhuma vulnerabilidade conhecida encontrada**")
    else:
        vulns = vulnerabilities.get("vulnerabilities", [])
        report.append(f"üö® **{len(vulns)} vulnerabilidades encontradas**")

        for vuln in vulns[:10]:  # Limitar a 10
            report.append(f"  - {vuln.get('package_name', 'Unknown')}: {vuln.get('vulnerability_id', 'Unknown')}")

    # Pacotes desatualizados
    if outdated["status"] == "checked":
        outdated_pkgs = outdated.get("outdated", [])
        if outdated_pkgs:
            report.append(f"üì¶ **{len(outdated_pkgs)} pacotes desatualizados**")
        else:
            report.append("‚úÖ **Todos os pacotes est√£o atualizados**")

    return "\n".join(report)

if __name__ == "__main__":
    print(generate_security_report())
```

## üìã ATUALIZA√á√ÉO SEGURA DE DEPEND√äNCIAS

### Processo de atualiza√ß√£o obrigat√≥rio
```bash
# ‚úÖ OBRIGAT√ìRIO - Processo de atualiza√ß√£o segura

# 1. Verificar vulnerabilidades atuais
uv run safety check

# 2. Verificar pacotes desatualizados
uv lock --check-updates

# 3. Fazer backup do lock atual
cp uv.lock uv.lock.backup

# 4. Atualizar depend√™ncias cr√≠ticas
uv lock --upgrade-package requests
uv lock --upgrade-package urllib3

# 5. Executar testes
uv run pytest

# 6. Verificar vulnerabilidades ap√≥s atualiza√ß√£o
uv run safety check

# 7. Aplicar mudan√ßas se tudo OK
uv sync
```

### Depend√™ncias cr√≠ticas a monitorar
```python
# Lista de depend√™ncias cr√≠ticas que precisam de monitoramento
CRITICAL_DEPENDENCIES = {
    "requests": ">=2.31.0",      # Para evitar vulnerabilidades HTTP
    "urllib3": ">=1.26.18",      # Para evitar vulnerabilidades SSL
    "cryptography": ">=41.0.0",  # Para criptografia segura
    "jinja2": ">=3.1.0",         # Para evitar XSS em templates
    "werkzeug": ">=2.3.0",       # Para seguran√ßa web
    "flask": ">=2.3.0",          # Se usado
    "django": ">=4.2.0",         # Se usado
    "sqlalchemy": ">=2.0.0",     # Se usado
}

# Verifica√ß√£o autom√°tica
def check_critical_versions():
    """Verifica se vers√µes cr√≠ticas est√£o atualizadas"""
    import pkg_resources

    issues = []
    for package, min_version in CRITICAL_DEPENDENCIES.items():
        try:
            installed = pkg_resources.get_distribution(package).version
            if pkg_resources.parse_version(installed) < pkg_resources.parse_version(min_version):
                issues.append(f"{package}: {installed} < {min_version}")
        except pkg_resources.DistributionNotFound:
            pass  # Pacote n√£o instalado

    return issues
```

## üîÑ WORKFLOWS DE CI/CD

### GitHub Actions obrigat√≥rio
```yaml
# .github/workflows/dependency-security.yml
name: Dependency Security Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Executar semanalmente
    - cron: '0 0 * * 1'

jobs:
  security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Setup uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: uv sync

    - name: Run security audit
      run: uv run safety check --json --output security-report.json

    - name: Check for critical vulnerabilities
      run: |
        if [ -f security-report.json ]; then
          vulnerabilities=$(jq '.vulnerabilities | length' security-report.json)
          if [ "$vulnerabilities" -gt 0 ]; then
            echo "üö® $vulnerabilities vulnerabilities found"
            jq '.vulnerabilities[] | "- \(.package_name): \(.vulnerability_id)"' security-report.json
            exit 1
          else
            echo "‚úÖ No critical vulnerabilities found"
          fi
        fi

    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: security-report.json
```

## üìã CHECKLIST DE DEPEND√äNCIAS

- [ ] uv usado exclusivamente para gerenciamento
- [ ] Nunca pip, poetry ou pip-tools diretamente
- [ ] Depend√™ncias verificadas por vulnerabilidades
- [ ] Scripts usam depend√™ncias inline quando apropriado
- [ ] Atualiza√ß√µes de seguran√ßa aplicadas regularmente
- [ ] CI/CD verifica vulnerabilidades automaticamente
- [ ] Backup do uv.lock feito antes de mudan√ßas
- [ ] Testes executados ap√≥s atualiza√ß√µes
- [ ] Relat√≥rios de seguran√ßa gerados automaticamente